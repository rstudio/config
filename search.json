[{"path":"/articles/config.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting started with the config package","text":"config package makes easy manage environment specific configuration values. example, might want use distinct values development, testing, production environments.","code":""},{"path":"/articles/config.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Getting started with the config package","text":"Configurations defined using YAML text file read default file named config.yml current working directory (parent directories config file found initially specified directory). Configuration files include default values well values arbitrary named configurations, example: config.yml read configuration values call config::get function, returns list containing values currently active configuration: R can also read single value configuration follows: R get function takes optional config argument determines configuration read values (“default” configuration used none specified).","code":"default:   trials: 5   dataset: \"data-sampled.csv\"    production:   trials: 30   dataset: \"data.csv\" config <- config::get() config$trials ## [1] 5 config$dataset ## [1] \"data-sampled.csv\" config::get(\"trials\") ## [1] 5 config::get(\"dataset\") ## [1] \"data-sampled.csv\""},{"path":"/articles/config.html","id":"configurations","dir":"Articles","previous_headings":"","what":"Configurations","title":"Getting started with the config package","text":"can specify configuration currently active setting R_CONFIG_ACTIVE environment variable. R_CONFIG_ACTIVE variable typically set within site-wide Renviron Rprofile (see R Startup details files). R can check whether particular configuration active using config::is_active function: R R","code":"# set the active configuration globally via Renviron.site or Rprofile.site Sys.setenv(R_CONFIG_ACTIVE = \"production\")  # read configuration value (will return 30 from the \"production\" config) config::get(\"trials\") ## [1] 30 config::is_active(\"production\") ## [1] TRUE Sys.setenv(R_CONFIG_ACTIVE = \"default\")"},{"path":"/articles/config.html","id":"configuration-files","dir":"Articles","previous_headings":"","what":"Configuration Files","title":"Getting started with the config package","text":"default configuration data read file named config.yml within current working directory (parent directories config file found initially specified directory). can use file argument config::get read alternate location. example: R don’t want ever scan parent directories configuration files can specify use_parent = FALSE: R","code":"config <- config::get(file = \"conf/config.yml\") config <- config::get(file = \"conf/config.yml\", use_parent = FALSE)"},{"path":"/articles/config.html","id":"do-not-attach-the-package-using-libaryconfig","dir":"Articles","previous_headings":"","what":"Do not attach the package using libary(config)","title":"Getting started with the config package","text":"strongly recommend use config::get() rather attaching package using library(config). fact, strongly recommend never use library(config). underlying reason get() merge() functions config mask functions names base R.","code":""},{"path":"/articles/inheritance.html","id":"defaults-and-inheritance","dir":"Articles","previous_headings":"","what":"Defaults and inheritance","title":"Inheritance and R expressions","text":"default configuration provides set values use named configuration active. configurations automatically inherit default values need define values specialized configuration. example, configuration production configuration doesn’t specify value trials read default configuration: config.yml R configurations automatically inherit default configuration. Configurations can also inherit one named configurations. example, file production configuration inherits test configuration: config.yml R","code":"default:   trials: 5   dataset: \"data-sampled.csv\"    production:   dataset: \"data.csv\" config::get(config = \"production\") #> $trials #> [1] 5 #>  #> $dataset #> [1] \"data.csv\" default:   trials: 5   dataset: \"data-sampled.csv\"  test:   trials: 30   dataset: \"data-test.csv\"    production:   inherits: test   dataset: \"data.csv\" config::get(config = \"production\") #> $trials #> [1] 30 #>  #> $inherits #> [1] \"test\" #>  #> $dataset #> [1] \"data.csv\""},{"path":"/articles/inheritance.html","id":"using-r-code-inside-the-yaml-file","dir":"Articles","previous_headings":"","what":"Using R code inside the yaml file","title":"Inheritance and R expressions","text":"can execute R code within configuration files prefacing values !expr. useful cases want base configuration values environment variables, R options, even config files. example: config.yml default result: R production result depend environment variables server: server-config.yml R","code":"default:   cores: 2   debug: true   server: \"localhost:5555\"     production:   cores: !expr getOption(\"mc.cores\")   debug: !expr Sys.getenv(\"ENABLE_DEBUG\") == \"1\"   server: !expr config::get(\"server\", file = \"etc/server-config.yml\") config::get(\"server\") #> [1] \"localhost:5555\" cat(readLines(\"etc/server-config.yml\"), sep = \"\\n\") #> default: #>   server: \"production.example.com\" config::get(\"server\", config = \"production\") #> [1] \"production.example.com\""},{"path":"/articles/inheritance.html","id":"referencing-previously-assigned-parameters","dir":"Articles","previous_headings":"Using R code inside the yaml file","what":"Referencing previously assigned parameters","title":"Inheritance and R expressions","text":"can use previously assigned parameter inside R code long assigned directly. config.yml R R","code":"default:   file: \"data.csv\"  test:   data_dir: \"test/out\"   dataset: !expr file.path(data_dir, file)    production:   data_dir: \"production/out\"   dataset: !expr file.path(data_dir, file) config::get(\"dataset\", config = \"test\") #> [1] \"test/out/data.csv\" config::get(config = \"production\") #> $file #> [1] \"data.csv\" #>  #> $data_dir #> [1] \"production/out\" #>  #> $dataset #> [1] \"production/out/data.csv\""},{"path":"/articles/inheritance.html","id":"limitations-of-using-r-expressions","dir":"Articles","previous_headings":"","what":"Limitations of using R expressions","title":"Inheritance and R expressions","text":"ability use R expressions gives substantial flexibility allow configurations depend environment variables, files information ’s available target environment. However, keep mind limitations: R expression can refer elements configuration file inherits . R expression can refer another R expression. config file violates limitations, config::get() throw error. example, let’s say want construct configuration computes location based filename folder.","code":""},{"path":"/articles/inheritance.html","id":"a-valid-example","dir":"Articles","previous_headings":"Limitations of using R expressions","what":"A valid example","title":"Inheritance and R expressions","text":"filename folder constant (.e. computed expressions) works: config.yml R","code":"default:   filename: \"trials.csv\"   folder: \"some/path\"   location: !expr file.path(folder, filename) config::get(\"location\") #> [1] \"some/path/trials.csv\""},{"path":"/articles/inheritance.html","id":"an-invalid-example","dir":"Articles","previous_headings":"Limitations of using R expressions","what":"An invalid example","title":"Inheritance and R expressions","text":"However, folder also computed value, location can computed throws error: config.yml R","code":"default:   filename: \"trials.csv\"   folder: !expr c(\"some/path\")   location: !expr file.path(folder, filename) config::get(\"location\") #> Error in config::get(\"location\"): Attempt to assign nested list value from expression. #> Only directly assigned values can be used in expressions. #> Original Error: #> *  eval(expr, envir = envir): object 'folder' not found"},{"path":"/articles/rsconnect.html","id":"using-config-for-staging-and-prod-on-multiple-servers","dir":"Articles","previous_headings":"","what":"Using config for staging and prod on multiple servers","title":"Using config with Posit Connect","text":"Many customers Posit Connect separate Connect instances purposes separating staging production. case, system administrator needs configure R_CONFIG_ACTIVE environment variable different values machine. example: staging server: rsconnect-staging production server: rsconnect-prod Using example values, configure config.yml file look like : config.yml Note configuration uses inheritance config yaml files, common configuration rsconnect staging prod configurations inherit rsconnect configuration.","code":"default:   trials: 5   dataset: \"data-sampled.csv\"  rsconnect:   trials: 30    rsconnect-staging:   inherits: rsconnect   dataset: \"data-staging.csv\"    rsconnect-prod:   inherits: rsconnect   dataset: \"data.csv\""},{"path":"/articles/rsconnect.html","id":"using-config-for-staging-and-prod-on-a-single-server","dir":"Articles","previous_headings":"","what":"Using config for staging and prod on a single server","title":"Using config with Posit Connect","text":"may use case use Connect instance host two instances app, staging (test) production. May 2023 release Connect added support allowing users override value R_CONFIG_ACTIVE. using version Connect newer 2023.05.0, can change value R_CONFIG_ACTIVE using envVars argument rsconnect::deployApp() Connect Server API. using version Connect less equal 2023.05.0, can use config set different values staging prod, changing environment variable config::get() looks . Specifically, must specify different config argument config::get(). example, can create new environment variable Connect app, called R_CONFIG_ACTIVE_APP, use config::get() like : R , example utilizes inheritance config yaml files, common configuration rsconnect staging prod configurations inherit rsconnect configuration. case, may config.yml file like : config.yml configure environment variable correctly, get appropriate dataset values staging (data-staging.csv) prod (data.csv): R","code":"config::get(\"trials\", config = Sys.getenv(\"R_CONFIG_ACTIVE_APP\")) #> [1] 5 default:   trials: 5   dataset: \"data-sampled.csv\"  rsconnect:   trials: 30    staging:   inherits: rsconnect   dataset: \"data-staging.csv\"    prod:   inherits: rsconnect   dataset: \"data.csv\" config::get(\"dataset\", config = \"staging\") #> [1] \"data-staging.csv\" config::get(\"dataset\", config = \"prod\") #> [1] \"data.csv\""},{"path":"/articles/rsconnect.html","id":"a-utility-function-that-might-be-helpful","dir":"Articles","previous_headings":"","what":"A utility function that might be helpful","title":"Using config with Posit Connect","text":"situation wish use different environment variable, can potentially save keystrokes defining utility function wraps around config::get(). utility simply passes different value config argument, like : can call function app:","code":"cfg_get_app <- function (   value = NULL,    config = Sys.getenv(\"R_CONFIG_ACTIVE_APP\", \"default\"),    ... ) {   config::get(value = value, config = config, ...) } cfg_get_app(\"value\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"JJ Allaire. Author. Andrie de Vries. Maintainer. . Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Allaire J (2025). config: Manage Environment Specific Configuration Values. R package version 0.3.2.9000, https://github.com/rstudio/config, https://rstudio.github.io/config/.","code":"@Manual{,   title = {config: Manage Environment Specific Configuration Values},   author = {JJ Allaire},   year = {2025},   note = {R package version 0.3.2.9000, https://github.com/rstudio/config},   url = {https://rstudio.github.io/config/}, }"},{"path":"/index.html","id":"config-","dir":"","previous_headings":"","what":"Manage Environment Specific Configuration Values","title":"Manage Environment Specific Configuration Values","text":"config package makes easy manage environment specific configuration values. example, might want use distinct values development, testing, production environments.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manage Environment Specific Configuration Values","text":"can install config package CRAN using:","code":"install.packages(\"config\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Manage Environment Specific Configuration Values","text":"use config, create file config.yml default well arbitrary configurations. example: config.yml read configuration values call config::get function, returns list containing values currently active configuration: R can also read single value configuration follows: R config::get() function takes optional config argument determines configuration read values (“default” configuration used none specified).","code":"default:   trials: 5   dataset: \"data-sampled.csv\"    production:   trials: 30   dataset: \"data.csv\" config <- config::get() config$trials #> [1] 5 config$dataset #> [1] \"data-sampled.csv\" config::get(\"trials\") #> [1] 5 config::get(\"dataset\") #> [1] \"data-sampled.csv\""},{"path":"/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Manage Environment Specific Configuration Values","text":"See package vignettes https://rstudio.github.io/config/ examples instructions advanced usage, including: Inheritance R expressions Using config Posit Connect","code":""},{"path":"/index.html","id":"do-not-attach-the-package-using-libaryconfig","dir":"","previous_headings":"","what":"Do not attach the package using libary(config)","title":"Manage Environment Specific Configuration Values","text":"strongly recommend use config::get() rather attaching package using library(config). fact, strongly recommend never use library(config). underlying reason get() merge() functions config mask functions names base R.","code":""},{"path":"/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage Environment Specific Configuration Values. — config","title":"Manage Environment Specific Configuration Values. — config","text":"Manage configuration values across multiple environments (e.g. development, test, production). Read values using function determines current environment returns appropriate value.","code":""},{"path":"/reference/config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage Environment Specific Configuration Values. — config","text":"main function get(). additional details see https://rstudio.github.io/config/.","code":""},{"path":[]},{"path":"/reference/config.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Manage Environment Specific Configuration Values. — config","text":"Maintainer: Andrie de Vries apdevries@gmail.com Authors: JJ Allaire jj@rstudio.com contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"/reference/get.html","id":null,"dir":"Reference","previous_headings":"","what":"Read configuration values. Always use as config::get(). — get","title":"Read configuration values. Always use as config::get(). — get","text":"Read currently active configuration, retrieving either single named value values list.","code":""},{"path":"/reference/get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read configuration values. Always use as config::get(). — get","text":"","code":"get(   value = NULL,   config = Sys.getenv(\"R_CONFIG_ACTIVE\", \"default\"),   file = Sys.getenv(\"R_CONFIG_FILE\", \"config.yml\"),   use_parent = TRUE )"},{"path":"/reference/get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read configuration values. Always use as config::get(). — get","text":"value Name value (NULL read values) config Name configuration read . Defaults value R_CONFIG_ACTIVE environment variable (\"default\" variable exist). file Configuration file read (defaults \"config.yml\"). file found location specified parent directories searched file name. use_parent TRUE scan parent directories configuration files specified config file found.","code":""},{"path":"/reference/get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read configuration values. Always use as config::get(). — get","text":"requested configuration value (values list NULL passed value). list, vector, corresponding contents config file.","code":""},{"path":"/reference/get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read configuration values. Always use as config::get(). — get","text":"additional details see https://rstudio.github.io/config/.","code":""},{"path":"/reference/get.html","id":"warning-do-not-attach-the-package-using-library-config-","dir":"Reference","previous_headings":"","what":"Warning - Do not attach the package using library(config)","title":"Read configuration values. Always use as config::get(). — get","text":"strongly recommend use config::get() rather attaching package using library(config). fact, strongly recommend never use library(config). underlying reason get() merge() functions {config} mask functions names base R.","code":""},{"path":[]},{"path":"/reference/get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read configuration values. Always use as config::get(). — get","text":"","code":"yaml <- \" default:   trials: 5   dataset: 'data-sampled.csv'  production:   trials: 30   dataset: 'data.csv' \"  get <- base::get    with_config(yaml, config::get()) #> $trials #> [1] 5 #>  #> $dataset #> [1] \"data-sampled.csv\" #>  with_config(yaml, config::get(\"trials\")) #> [1] 5"},{"path":"/reference/is_active.html","id":null,"dir":"Reference","previous_headings":"","what":"Test active configuration. — is_active","title":"Test active configuration. — is_active","text":"Check whether configuration currently active.","code":""},{"path":"/reference/is_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test active configuration. — is_active","text":"","code":"is_active(config)"},{"path":"/reference/is_active.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test active configuration. — is_active","text":"config Configuration name","code":""},{"path":"/reference/is_active.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test active configuration. — is_active","text":"Logical indicating whether specified configuration active","code":""},{"path":"/reference/is_active.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test active configuration. — is_active","text":"name currently active configuration read R_CONFIG_ACTIVE environment variable. variable defined \"default\" configuration used. test whether configuration active use is_active() function rather inspecting environment variable directly (tests remain valid means specifying configurations introduced future).","code":""},{"path":[]},{"path":"/reference/merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two configurations. Always use as config::merge(). — merge","title":"Merge two configurations. Always use as config::merge(). — merge","text":"Merge one configuration another recursively.","code":""},{"path":"/reference/merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two configurations. Always use as config::merge(). — merge","text":"","code":"merge(base_config, merge_config)"},{"path":"/reference/merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two configurations. Always use as config::merge(). — merge","text":"base_config Configuration merge values merge_config Configuration merge values ","code":""},{"path":"/reference/merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two configurations. Always use as config::merge(). — merge","text":"Configuration includes values merge_config merged base_config.","code":""},{"path":"/reference/merge.html","id":"warning-do-not-attach-the-package-using-library-config-","dir":"Reference","previous_headings":"","what":"Warning - Do not attach the package using library(config)","title":"Merge two configurations. Always use as config::merge(). — merge","text":"strongly recommend use config::get() rather attaching package using library(config). fact, strongly recommend never use library(config). underlying reason get() merge() functions {config} mask functions names base R.","code":""},{"path":[]},{"path":"/reference/with_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Run code using a temporary config file. — with_config","title":"Run code using a temporary config file. — with_config","text":"function takes inspiration withr::with_envvar() may useful testing purposes.","code":""},{"path":"/reference/with_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run code using a temporary config file. — with_config","text":"","code":"with_config(   config_yml,   code,   .active_config = c(R_CONFIG_ACTIVE = \"default\"),   .extra_env_vars = NULL )"},{"path":"/reference/with_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run code using a temporary config file. — with_config","text":"config_yml Either path config file, character string representing yaml configuration. code Code execute temporary environment. .active_config Either string representing configuration, e.g. default, named character representing environment variable, e.g. c(R_CONFIG_ACTIVE = \"default\"). .extra_env_vars Additional environment variables set.","code":""},{"path":"/reference/with_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run code using a temporary config file. — with_config","text":"result running code, temporarily set necessary environment variables.","code":""},{"path":"/reference/with_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run code using a temporary config file. — with_config","text":"","code":"yaml <- ' default:   db_name: dbase   databases:     db1: !expr paste0(db_name, \"/one\")     db2: !expr paste0(db_name, \"/two\")  staging:   staging_postfix: _staging   db_name: dbase   databases:     db1: !expr paste0(db_name, staging_postfix, \"/one\")     db2: !expr paste0(db_name, staging_postfix, \"/two\") '  # Ensure that base::get() doesn't get masked, for tests on CRAN get <- base::get  with_config(yaml, config::get() ) #> $databases #> $databases$db1 #> [1] \"dbase/one\" #>  #> $databases$db2 #> [1] \"dbase/two\" #>  #>  #> $db_name #> [1] \"dbase\" #>  with_config(yaml, config::get(\"databases\", config = \"default\") ) #> $db1 #> [1] \"dbase/one\" #>  #> $db2 #> [1] \"dbase/two\" #>  with_config(yaml, config::get(\"databases\", config = \"staging\") ) #> $db1 #> [1] \"dbase_staging/one\" #>  #> $db2 #> [1] \"dbase_staging/two\" #>   config_file <- system.file(\"tests/testthat/config.yml\", package = \"config\") if (file.exists(config_file)) {   with_config(config_file, config::get()) }"},{"path":"/news/index.html","id":"config-0329000-development-version","dir":"Changelog","previous_headings":"","what":"config 0.3.2.9000 (development version)","title":"config 0.3.2.9000 (development version)","text":"New features: Allow expressions inherits: line yaml file (#38) Bug fixes: Fixes bug introduced v0.3.2 result config::get() doesn’t correct class, resulting problems converting JSON (#49)","code":""},{"path":"/news/index.html","id":"config-032","dir":"Changelog","previous_headings":"","what":"config 0.3.2","title":"config 0.3.2","text":"CRAN release: 2023-08-30 New features: Better handling R expressions config.yml. particular, can now refer configuration values R expression. Check package attached throw message use config::ge() instead. New function with_config() might useful testing vignettes. Allow using string .active_config with_config() Documentation: New vignettes, particular using config Posit Connect. Better documentation attach package use config::get() instead.","code":""},{"path":"/news/index.html","id":"config-031-2020-12-15","dir":"Changelog","previous_headings":"","what":"config 0.3.1 (2020-12-15)","title":"config 0.3.1 (2020-12-15)","text":"CRAN release: 2020-12-17 Bug fix: evaluate expressions active config (configs). previous versions config, expressions yml file evaluated, regardless whether expressions used active config. version, appropriate config selected, expressions evaluated. Fixes #20","code":""},{"path":"/news/index.html","id":"config-030-2018-03-27","dir":"Changelog","previous_headings":"","what":"config 0.3.0 (2018-03-27)","title":"config 0.3.0 (2018-03-27)","text":"Improved handling expressions Bug fixes","code":""},{"path":"/news/index.html","id":"config-020-2016-08-02","dir":"Changelog","previous_headings":"","what":"config 0.2.0 (2016-08-02)","title":"config 0.2.0 (2016-08-02)","text":"Add merge function merge one configuration another.","code":""},{"path":"/news/index.html","id":"config-010-2016-06-08","dir":"Changelog","previous_headings":"","what":"config 0.1.0 (2016-06-08)","title":"config 0.1.0 (2016-06-08)","text":"CRAN release: 2016-06-08 Initial release CRAN","code":""}]
